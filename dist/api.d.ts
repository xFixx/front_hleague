/**
 * Hero League API
 * Test description
 *
 * The version of the OpenAPI document: v1
 * Contact: contact@jva.local
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 *
 * @export
 * @interface Activation
 */
export interface Activation {
    /**
     *
     * @type {string}
     * @memberof Activation
     */
    'uid': string;
    /**
     *
     * @type {string}
     * @memberof Activation
     */
    'token': string;
}
/**
 *
 * @export
 * @interface Category
 */
export interface Category {
    /**
     *
     * @type {number}
     * @memberof Category
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof Category
     */
    'title': string;
    /**
     *
     * @type {Array<Exam>}
     * @memberof Category
     */
    'exams'?: Array<Exam>;
}
/**
 *
 * @export
 * @interface CurrentUser
 */
export interface CurrentUser {
    /**
     *
     * @type {number}
     * @memberof CurrentUser
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof CurrentUser
     */
    'avatar'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CurrentUser
     */
    'email'?: string;
    /**
     *
     * @type {string}
     * @memberof CurrentUser
     */
    'first_name'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CurrentUser
     */
    'last_name'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CurrentUser
     */
    'phone_number'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CurrentUser
     */
    'date_birthday'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CurrentUser
     */
    'role'?: CurrentUserRoleEnum;
    /**
     *
     * @type {string}
     * @memberof CurrentUser
     */
    'city'?: string | null;
}
export declare const CurrentUserRoleEnum: {
    readonly Instructor: "Instructor";
    readonly Volunteer: "Volunteer";
    readonly Judge: "Judge";
    readonly Trainer: "Trainer";
};
export declare type CurrentUserRoleEnum = typeof CurrentUserRoleEnum[keyof typeof CurrentUserRoleEnum];
/**
 *
 * @export
 * @interface CustomUserCreate
 */
export interface CustomUserCreate {
    /**
     *
     * @type {string}
     * @memberof CustomUserCreate
     */
    'avatar'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CustomUserCreate
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof CustomUserCreate
     */
    'password': string;
    /**
     *
     * @type {string}
     * @memberof CustomUserCreate
     */
    'first_name'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CustomUserCreate
     */
    'last_name'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CustomUserCreate
     */
    'phone_number'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CustomUserCreate
     */
    'date_birthday'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CustomUserCreate
     */
    'role'?: CustomUserCreateRoleEnum;
    /**
     *
     * @type {string}
     * @memberof CustomUserCreate
     */
    'city'?: string | null;
}
export declare const CustomUserCreateRoleEnum: {
    readonly Instructor: "Instructor";
    readonly Volunteer: "Volunteer";
    readonly Judge: "Judge";
    readonly Trainer: "Trainer";
};
export declare type CustomUserCreateRoleEnum = typeof CustomUserCreateRoleEnum[keyof typeof CustomUserCreateRoleEnum];
/**
 *
 * @export
 * @interface Exam
 */
export interface Exam {
    /**
     *
     * @type {number}
     * @memberof Exam
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof Exam
     */
    'title': string;
    /**
     *
     * @type {Array<ExamQuestion>}
     * @memberof Exam
     */
    'questions': Array<ExamQuestion> | null;
}
/**
 *
 * @export
 * @interface ExamQuestion
 */
export interface ExamQuestion {
    /**
     *
     * @type {number}
     * @memberof ExamQuestion
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof ExamQuestion
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof ExamQuestion
     */
    'question_type': ExamQuestionQuestionTypeEnum;
    /**
     *
     * @type {Array<QuestionAnswer>}
     * @memberof ExamQuestion
     */
    'answers'?: Array<QuestionAnswer>;
    /**
     *
     * @type {string}
     * @memberof ExamQuestion
     */
    'attachment_file'?: string | null;
}
export declare const ExamQuestionQuestionTypeEnum: {
    readonly R: "R";
    readonly C: "C";
};
export declare type ExamQuestionQuestionTypeEnum = typeof ExamQuestionQuestionTypeEnum[keyof typeof ExamQuestionQuestionTypeEnum];
/**
 *
 * @export
 * @interface PasswordResetConfirm
 */
export interface PasswordResetConfirm {
    /**
     *
     * @type {string}
     * @memberof PasswordResetConfirm
     */
    'uid': string;
    /**
     *
     * @type {string}
     * @memberof PasswordResetConfirm
     */
    'token': string;
    /**
     *
     * @type {string}
     * @memberof PasswordResetConfirm
     */
    'new_password': string;
}
/**
 *
 * @export
 * @interface QuestionAnswer
 */
export interface QuestionAnswer {
    /**
     *
     * @type {number}
     * @memberof QuestionAnswer
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof QuestionAnswer
     */
    'title'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof QuestionAnswer
     */
    'is_correct'?: boolean;
}
/**
 *
 * @export
 * @interface SendEmailReset
 */
export interface SendEmailReset {
    /**
     *
     * @type {string}
     * @memberof SendEmailReset
     */
    'email': string;
}
/**
 *
 * @export
 * @interface SetPasswordRetype
 */
export interface SetPasswordRetype {
    /**
     *
     * @type {string}
     * @memberof SetPasswordRetype
     */
    'new_password': string;
    /**
     *
     * @type {string}
     * @memberof SetPasswordRetype
     */
    're_new_password': string;
    /**
     *
     * @type {string}
     * @memberof SetPasswordRetype
     */
    'current_password': string;
}
/**
 *
 * @export
 * @interface SetUsername
 */
export interface SetUsername {
    /**
     *
     * @type {string}
     * @memberof SetUsername
     */
    'current_password': string;
    /**
     *
     * @type {string}
     * @memberof SetUsername
     */
    'new_email': string;
}
/**
 *
 * @export
 * @interface TokenObtainPair
 */
export interface TokenObtainPair {
    /**
     *
     * @type {string}
     * @memberof TokenObtainPair
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof TokenObtainPair
     */
    'password': string;
}
/**
 *
 * @export
 * @interface TokenRefresh
 */
export interface TokenRefresh {
    /**
     *
     * @type {string}
     * @memberof TokenRefresh
     */
    'refresh': string;
    /**
     *
     * @type {string}
     * @memberof TokenRefresh
     */
    'access'?: string;
}
/**
 *
 * @export
 * @interface TokenVerify
 */
export interface TokenVerify {
    /**
     *
     * @type {string}
     * @memberof TokenVerify
     */
    'token': string;
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
    /**
     *
     * @type {string}
     * @memberof User
     */
    'email'?: string;
}
/**
 *
 * @export
 * @interface UserAnswer
 */
export interface UserAnswer {
    /**
     *
     * @type {number}
     * @memberof UserAnswer
     */
    'id'?: number;
    /**
     *
     * @type {number}
     * @memberof UserAnswer
     */
    'question': number;
    /**
     *
     * @type {number}
     * @memberof UserAnswer
     */
    'answer'?: number | null;
    /**
     *
     * @type {Array<UserCheckBoxAnswer>}
     * @memberof UserAnswer
     */
    'check_boxes'?: Array<UserCheckBoxAnswer>;
    /**
     *
     * @type {boolean}
     * @memberof UserAnswer
     */
    'is_correct'?: boolean;
}
/**
 *
 * @export
 * @interface UserAnswersDetail
 */
export interface UserAnswersDetail {
    /**
     *
     * @type {number}
     * @memberof UserAnswersDetail
     */
    'id'?: number;
    /**
     *
     * @type {ExamQuestion}
     * @memberof UserAnswersDetail
     */
    'question': ExamQuestion | null;
    /**
     *
     * @type {QuestionAnswer}
     * @memberof UserAnswersDetail
     */
    'answer': QuestionAnswer;
    /**
     *
     * @type {Array<UserDetailCheckBoxAnswer>}
     * @memberof UserAnswersDetail
     */
    'check_boxes'?: Array<UserDetailCheckBoxAnswer>;
    /**
     *
     * @type {boolean}
     * @memberof UserAnswersDetail
     */
    'is_correct'?: boolean;
}
/**
 *
 * @export
 * @interface UserCheckBoxAnswer
 */
export interface UserCheckBoxAnswer {
    /**
     *
     * @type {number}
     * @memberof UserCheckBoxAnswer
     */
    'id'?: number;
    /**
     *
     * @type {number}
     * @memberof UserCheckBoxAnswer
     */
    'answer': number;
}
/**
 *
 * @export
 * @interface UserDetail
 */
export interface UserDetail {
    /**
     *
     * @type {string}
     * @memberof UserDetail
     */
    'first_name'?: string | null;
    /**
     *
     * @type {string}
     * @memberof UserDetail
     */
    'last_name'?: string | null;
}
/**
 *
 * @export
 * @interface UserDetailCheckBoxAnswer
 */
export interface UserDetailCheckBoxAnswer {
    /**
     *
     * @type {number}
     * @memberof UserDetailCheckBoxAnswer
     */
    'id'?: number;
    /**
     *
     * @type {QuestionAnswer}
     * @memberof UserDetailCheckBoxAnswer
     */
    'answer': QuestionAnswer;
}
/**
 *
 * @export
 * @interface UserExam
 */
export interface UserExam {
    /**
     *
     * @type {number}
     * @memberof UserExam
     */
    'id'?: number;
    /**
     *
     * @type {number}
     * @memberof UserExam
     */
    'exam'?: number | null;
    /**
     *
     * @type {Array<UserAnswer>}
     * @memberof UserExam
     */
    'user_answers': Array<UserAnswer>;
    /**
     *
     * @type {boolean}
     * @memberof UserExam
     */
    'passed'?: boolean;
    /**
     *
     * @type {string}
     * @memberof UserExam
     */
    'statistic'?: string;
}
/**
 *
 * @export
 * @interface UserExamDetail
 */
export interface UserExamDetail {
    /**
     *
     * @type {number}
     * @memberof UserExamDetail
     */
    'id'?: number;
    /**
     *
     * @type {boolean}
     * @memberof UserExamDetail
     */
    'passed'?: boolean;
    /**
     *
     * @type {UserDetail}
     * @memberof UserExamDetail
     */
    'user': UserDetail;
    /**
     *
     * @type {Array<UserAnswersDetail>}
     * @memberof UserExamDetail
     */
    'user_answers': Array<UserAnswersDetail>;
    /**
     *
     * @type {string}
     * @memberof UserExamDetail
     */
    'statistic'?: string;
}
/**
 *
 * @export
 * @interface UsernameResetConfirm
 */
export interface UsernameResetConfirm {
    /**
     *
     * @type {string}
     * @memberof UsernameResetConfirm
     */
    'new_email': string;
}
/**
 * AccountsApi - axios parameter creator
 * @export
 */
export declare const AccountsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
     * @param {TokenObtainPair} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthJwtCreateCreate: (data: TokenObtainPair, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
     * @param {TokenRefresh} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthJwtRefreshCreate: (data: TokenRefresh, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Takes a token and indicates if it is valid.  This view provides no information about a token\'s fitness for a particular use.
     * @param {TokenVerify} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthJwtVerifyCreate: (data: TokenVerify, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {Activation} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthUsersActivation: (data: Activation, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {CustomUserCreate} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthUsersCreate: (data: CustomUserCreate, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthUsersDelete: (email: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthUsersList: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthUsersMeDelete: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {User} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthUsersMePartialUpdate: (data: User, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthUsersMeRead: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {User} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthUsersMeUpdate: (data: User, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} email
     * @param {User} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthUsersPartialUpdate: (email: string, data: User, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthUsersRead: (email: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {SendEmailReset} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthUsersResendActivation: (data: SendEmailReset, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {SendEmailReset} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthUsersResetPassword: (data: SendEmailReset, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {PasswordResetConfirm} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthUsersResetPasswordConfirm: (data: PasswordResetConfirm, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {SendEmailReset} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthUsersResetUsername: (data: SendEmailReset, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {UsernameResetConfirm} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthUsersResetUsernameConfirm: (data: UsernameResetConfirm, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {SetPasswordRetype} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthUsersSetPassword: (data: SetPasswordRetype, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {SetUsername} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthUsersSetUsername: (data: SetUsername, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} email
     * @param {User} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthUsersUpdate: (email: string, data: User, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {CurrentUser} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsCreate: (data: CurrentUser, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id A unique integer value identifying this Пользователь.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsDelete: (id: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsList: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsMeList: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id A unique integer value identifying this Пользователь.
     * @param {CurrentUser} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsPartialUpdate: (id: number, data: CurrentUser, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id A unique integer value identifying this Пользователь.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsRead: (id: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id A unique integer value identifying this Пользователь.
     * @param {CurrentUser} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsUpdate: (id: number, data: CurrentUser, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AccountsApi - functional programming interface
 * @export
 */
export declare const AccountsApiFp: (configuration?: Configuration) => {
    /**
     * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
     * @param {TokenObtainPair} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthJwtCreateCreate(data: TokenObtainPair, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenObtainPair>>;
    /**
     * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
     * @param {TokenRefresh} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthJwtRefreshCreate(data: TokenRefresh, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenRefresh>>;
    /**
     * Takes a token and indicates if it is valid.  This view provides no information about a token\'s fitness for a particular use.
     * @param {TokenVerify} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthJwtVerifyCreate(data: TokenVerify, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenVerify>>;
    /**
     *
     * @param {Activation} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthUsersActivation(data: Activation, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Activation>>;
    /**
     *
     * @param {CustomUserCreate} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthUsersCreate(data: CustomUserCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomUserCreate>>;
    /**
     *
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthUsersDelete(email: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthUsersList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthUsersMeDelete(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @param {User} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthUsersMePartialUpdate(data: User, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthUsersMeRead(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>>;
    /**
     *
     * @param {User} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthUsersMeUpdate(data: User, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     *
     * @param {string} email
     * @param {User} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthUsersPartialUpdate(email: string, data: User, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     *
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthUsersRead(email: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     *
     * @param {SendEmailReset} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthUsersResendActivation(data: SendEmailReset, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SendEmailReset>>;
    /**
     *
     * @param {SendEmailReset} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthUsersResetPassword(data: SendEmailReset, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SendEmailReset>>;
    /**
     *
     * @param {PasswordResetConfirm} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthUsersResetPasswordConfirm(data: PasswordResetConfirm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PasswordResetConfirm>>;
    /**
     *
     * @param {SendEmailReset} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthUsersResetUsername(data: SendEmailReset, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SendEmailReset>>;
    /**
     *
     * @param {UsernameResetConfirm} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthUsersResetUsernameConfirm(data: UsernameResetConfirm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsernameResetConfirm>>;
    /**
     *
     * @param {SetPasswordRetype} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthUsersSetPassword(data: SetPasswordRetype, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetPasswordRetype>>;
    /**
     *
     * @param {SetUsername} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthUsersSetUsername(data: SetUsername, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetUsername>>;
    /**
     *
     * @param {string} email
     * @param {User} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthUsersUpdate(email: string, data: User, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     *
     * @param {CurrentUser} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsCreate(data: CurrentUser, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CurrentUser>>;
    /**
     *
     * @param {number} id A unique integer value identifying this Пользователь.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CurrentUser>>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsMeList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @param {number} id A unique integer value identifying this Пользователь.
     * @param {CurrentUser} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsPartialUpdate(id: number, data: CurrentUser, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CurrentUser>>;
    /**
     *
     * @param {number} id A unique integer value identifying this Пользователь.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CurrentUser>>;
    /**
     *
     * @param {number} id A unique integer value identifying this Пользователь.
     * @param {CurrentUser} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsUpdate(id: number, data: CurrentUser, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CurrentUser>>;
};
/**
 * AccountsApi - factory interface
 * @export
 */
export declare const AccountsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
     * @param {TokenObtainPair} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthJwtCreateCreate(data: TokenObtainPair, options?: any): AxiosPromise<TokenObtainPair>;
    /**
     * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
     * @param {TokenRefresh} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthJwtRefreshCreate(data: TokenRefresh, options?: any): AxiosPromise<TokenRefresh>;
    /**
     * Takes a token and indicates if it is valid.  This view provides no information about a token\'s fitness for a particular use.
     * @param {TokenVerify} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthJwtVerifyCreate(data: TokenVerify, options?: any): AxiosPromise<TokenVerify>;
    /**
     *
     * @param {Activation} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthUsersActivation(data: Activation, options?: any): AxiosPromise<Activation>;
    /**
     *
     * @param {CustomUserCreate} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthUsersCreate(data: CustomUserCreate, options?: any): AxiosPromise<CustomUserCreate>;
    /**
     *
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthUsersDelete(email: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthUsersList(options?: any): AxiosPromise<Array<User>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthUsersMeDelete(options?: any): AxiosPromise<void>;
    /**
     *
     * @param {User} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthUsersMePartialUpdate(data: User, options?: any): AxiosPromise<User>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthUsersMeRead(options?: any): AxiosPromise<Array<User>>;
    /**
     *
     * @param {User} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthUsersMeUpdate(data: User, options?: any): AxiosPromise<User>;
    /**
     *
     * @param {string} email
     * @param {User} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthUsersPartialUpdate(email: string, data: User, options?: any): AxiosPromise<User>;
    /**
     *
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthUsersRead(email: string, options?: any): AxiosPromise<User>;
    /**
     *
     * @param {SendEmailReset} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthUsersResendActivation(data: SendEmailReset, options?: any): AxiosPromise<SendEmailReset>;
    /**
     *
     * @param {SendEmailReset} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthUsersResetPassword(data: SendEmailReset, options?: any): AxiosPromise<SendEmailReset>;
    /**
     *
     * @param {PasswordResetConfirm} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthUsersResetPasswordConfirm(data: PasswordResetConfirm, options?: any): AxiosPromise<PasswordResetConfirm>;
    /**
     *
     * @param {SendEmailReset} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthUsersResetUsername(data: SendEmailReset, options?: any): AxiosPromise<SendEmailReset>;
    /**
     *
     * @param {UsernameResetConfirm} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthUsersResetUsernameConfirm(data: UsernameResetConfirm, options?: any): AxiosPromise<UsernameResetConfirm>;
    /**
     *
     * @param {SetPasswordRetype} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthUsersSetPassword(data: SetPasswordRetype, options?: any): AxiosPromise<SetPasswordRetype>;
    /**
     *
     * @param {SetUsername} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthUsersSetUsername(data: SetUsername, options?: any): AxiosPromise<SetUsername>;
    /**
     *
     * @param {string} email
     * @param {User} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsAuthUsersUpdate(email: string, data: User, options?: any): AxiosPromise<User>;
    /**
     *
     * @param {CurrentUser} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsCreate(data: CurrentUser, options?: any): AxiosPromise<CurrentUser>;
    /**
     *
     * @param {number} id A unique integer value identifying this Пользователь.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsDelete(id: number, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsList(options?: any): AxiosPromise<Array<CurrentUser>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsMeList(options?: any): AxiosPromise<void>;
    /**
     *
     * @param {number} id A unique integer value identifying this Пользователь.
     * @param {CurrentUser} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsPartialUpdate(id: number, data: CurrentUser, options?: any): AxiosPromise<CurrentUser>;
    /**
     *
     * @param {number} id A unique integer value identifying this Пользователь.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsRead(id: number, options?: any): AxiosPromise<CurrentUser>;
    /**
     *
     * @param {number} id A unique integer value identifying this Пользователь.
     * @param {CurrentUser} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountsUpdate(id: number, data: CurrentUser, options?: any): AxiosPromise<CurrentUser>;
};
/**
 * AccountsApi - object-oriented interface
 * @export
 * @class AccountsApi
 * @extends {BaseAPI}
 */
export declare class AccountsApi extends BaseAPI {
    /**
     * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
     * @param {TokenObtainPair} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    accountsAuthJwtCreateCreate(data: TokenObtainPair, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TokenObtainPair>>;
    /**
     * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
     * @param {TokenRefresh} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    accountsAuthJwtRefreshCreate(data: TokenRefresh, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TokenRefresh>>;
    /**
     * Takes a token and indicates if it is valid.  This view provides no information about a token\'s fitness for a particular use.
     * @param {TokenVerify} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    accountsAuthJwtVerifyCreate(data: TokenVerify, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TokenVerify>>;
    /**
     *
     * @param {Activation} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    accountsAuthUsersActivation(data: Activation, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Activation>>;
    /**
     *
     * @param {CustomUserCreate} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    accountsAuthUsersCreate(data: CustomUserCreate, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CustomUserCreate>>;
    /**
     *
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    accountsAuthUsersDelete(email: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    accountsAuthUsersList(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<User[]>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    accountsAuthUsersMeDelete(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @param {User} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    accountsAuthUsersMePartialUpdate(data: User, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<User>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    accountsAuthUsersMeRead(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<User[]>>;
    /**
     *
     * @param {User} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    accountsAuthUsersMeUpdate(data: User, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<User>>;
    /**
     *
     * @param {string} email
     * @param {User} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    accountsAuthUsersPartialUpdate(email: string, data: User, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<User>>;
    /**
     *
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    accountsAuthUsersRead(email: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<User>>;
    /**
     *
     * @param {SendEmailReset} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    accountsAuthUsersResendActivation(data: SendEmailReset, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SendEmailReset>>;
    /**
     *
     * @param {SendEmailReset} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    accountsAuthUsersResetPassword(data: SendEmailReset, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SendEmailReset>>;
    /**
     *
     * @param {PasswordResetConfirm} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    accountsAuthUsersResetPasswordConfirm(data: PasswordResetConfirm, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PasswordResetConfirm>>;
    /**
     *
     * @param {SendEmailReset} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    accountsAuthUsersResetUsername(data: SendEmailReset, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SendEmailReset>>;
    /**
     *
     * @param {UsernameResetConfirm} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    accountsAuthUsersResetUsernameConfirm(data: UsernameResetConfirm, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UsernameResetConfirm>>;
    /**
     *
     * @param {SetPasswordRetype} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    accountsAuthUsersSetPassword(data: SetPasswordRetype, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SetPasswordRetype>>;
    /**
     *
     * @param {SetUsername} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    accountsAuthUsersSetUsername(data: SetUsername, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SetUsername>>;
    /**
     *
     * @param {string} email
     * @param {User} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    accountsAuthUsersUpdate(email: string, data: User, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<User>>;
    /**
     *
     * @param {CurrentUser} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    accountsCreate(data: CurrentUser, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CurrentUser>>;
    /**
     *
     * @param {number} id A unique integer value identifying this Пользователь.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    accountsDelete(id: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    accountsList(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CurrentUser[]>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    accountsMeList(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @param {number} id A unique integer value identifying this Пользователь.
     * @param {CurrentUser} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    accountsPartialUpdate(id: number, data: CurrentUser, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CurrentUser>>;
    /**
     *
     * @param {number} id A unique integer value identifying this Пользователь.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    accountsRead(id: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CurrentUser>>;
    /**
     *
     * @param {number} id A unique integer value identifying this Пользователь.
     * @param {CurrentUser} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    accountsUpdate(id: number, data: CurrentUser, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CurrentUser>>;
}
/**
 * CategoriesApi - axios parameter creator
 * @export
 */
export declare const CategoriesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {Category} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    categoriesCreate: (data: Category, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id A unique integer value identifying this Категория.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    categoriesDelete: (id: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    categoriesList: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id A unique integer value identifying this Категория.
     * @param {Category} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    categoriesPartialUpdate: (id: number, data: Category, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id A unique integer value identifying this Категория.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    categoriesRead: (id: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id A unique integer value identifying this Категория.
     * @param {Category} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    categoriesUpdate: (id: number, data: Category, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * CategoriesApi - functional programming interface
 * @export
 */
export declare const CategoriesApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {Category} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    categoriesCreate(data: Category, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Category>>;
    /**
     *
     * @param {number} id A unique integer value identifying this Категория.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    categoriesDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    categoriesList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Category>>>;
    /**
     *
     * @param {number} id A unique integer value identifying this Категория.
     * @param {Category} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    categoriesPartialUpdate(id: number, data: Category, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Category>>;
    /**
     *
     * @param {number} id A unique integer value identifying this Категория.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    categoriesRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Category>>;
    /**
     *
     * @param {number} id A unique integer value identifying this Категория.
     * @param {Category} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    categoriesUpdate(id: number, data: Category, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Category>>;
};
/**
 * CategoriesApi - factory interface
 * @export
 */
export declare const CategoriesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {Category} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    categoriesCreate(data: Category, options?: any): AxiosPromise<Category>;
    /**
     *
     * @param {number} id A unique integer value identifying this Категория.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    categoriesDelete(id: number, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    categoriesList(options?: any): AxiosPromise<Array<Category>>;
    /**
     *
     * @param {number} id A unique integer value identifying this Категория.
     * @param {Category} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    categoriesPartialUpdate(id: number, data: Category, options?: any): AxiosPromise<Category>;
    /**
     *
     * @param {number} id A unique integer value identifying this Категория.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    categoriesRead(id: number, options?: any): AxiosPromise<Category>;
    /**
     *
     * @param {number} id A unique integer value identifying this Категория.
     * @param {Category} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    categoriesUpdate(id: number, data: Category, options?: any): AxiosPromise<Category>;
};
/**
 * CategoriesApi - object-oriented interface
 * @export
 * @class CategoriesApi
 * @extends {BaseAPI}
 */
export declare class CategoriesApi extends BaseAPI {
    /**
     *
     * @param {Category} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    categoriesCreate(data: Category, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Category>>;
    /**
     *
     * @param {number} id A unique integer value identifying this Категория.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    categoriesDelete(id: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    categoriesList(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Category[]>>;
    /**
     *
     * @param {number} id A unique integer value identifying this Категория.
     * @param {Category} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    categoriesPartialUpdate(id: number, data: Category, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Category>>;
    /**
     *
     * @param {number} id A unique integer value identifying this Категория.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    categoriesRead(id: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Category>>;
    /**
     *
     * @param {number} id A unique integer value identifying this Категория.
     * @param {Category} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    categoriesUpdate(id: number, data: Category, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Category>>;
}
/**
 * ExamsApi - axios parameter creator
 * @export
 */
export declare const ExamsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {Exam} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    examsExamsCreate: (data: Exam, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id A unique integer value identifying this Экзамен.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    examsExamsDelete: (id: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    examsExamsList: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id A unique integer value identifying this Экзамен.
     * @param {Exam} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    examsExamsPartialUpdate: (id: number, data: Exam, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id A unique integer value identifying this Экзамен.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    examsExamsRead: (id: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id A unique integer value identifying this Экзамен.
     * @param {Exam} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    examsExamsUpdate: (id: number, data: Exam, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id A unique integer value identifying this ВОПРОС.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    examsQuestionsDelete: (id: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {UserExam} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    examsUserExamsCreate: (data: UserExam, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id A unique integer value identifying this ПОЛЬЗОВАТЕЛЬСКИЙ ЭКЗАМЕН.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    examsUserExamsDelete: (id: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    examsUserExamsList: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id A unique integer value identifying this ПОЛЬЗОВАТЕЛЬСКИЙ ЭКЗАМЕН.
     * @param {UserExam} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    examsUserExamsPartialUpdate: (id: number, data: UserExam, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id A unique integer value identifying this ПОЛЬЗОВАТЕЛЬСКИЙ ЭКЗАМЕН.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    examsUserExamsRead: (id: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {number} id A unique integer value identifying this ПОЛЬЗОВАТЕЛЬСКИЙ ЭКЗАМЕН.
     * @param {UserExam} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    examsUserExamsUpdate: (id: number, data: UserExam, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ExamsApi - functional programming interface
 * @export
 */
export declare const ExamsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {Exam} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    examsExamsCreate(data: Exam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Exam>>;
    /**
     *
     * @param {number} id A unique integer value identifying this Экзамен.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    examsExamsDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    examsExamsList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Exam>>>;
    /**
     *
     * @param {number} id A unique integer value identifying this Экзамен.
     * @param {Exam} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    examsExamsPartialUpdate(id: number, data: Exam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Exam>>;
    /**
     *
     * @param {number} id A unique integer value identifying this Экзамен.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    examsExamsRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Exam>>;
    /**
     *
     * @param {number} id A unique integer value identifying this Экзамен.
     * @param {Exam} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    examsExamsUpdate(id: number, data: Exam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Exam>>;
    /**
     *
     * @param {number} id A unique integer value identifying this ВОПРОС.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    examsQuestionsDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @param {UserExam} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    examsUserExamsCreate(data: UserExam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserExam>>;
    /**
     *
     * @param {number} id A unique integer value identifying this ПОЛЬЗОВАТЕЛЬСКИЙ ЭКЗАМЕН.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    examsUserExamsDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    examsUserExamsList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserExam>>>;
    /**
     *
     * @param {number} id A unique integer value identifying this ПОЛЬЗОВАТЕЛЬСКИЙ ЭКЗАМЕН.
     * @param {UserExam} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    examsUserExamsPartialUpdate(id: number, data: UserExam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserExam>>;
    /**
     *
     * @param {number} id A unique integer value identifying this ПОЛЬЗОВАТЕЛЬСКИЙ ЭКЗАМЕН.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    examsUserExamsRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserExamDetail>>;
    /**
     *
     * @param {number} id A unique integer value identifying this ПОЛЬЗОВАТЕЛЬСКИЙ ЭКЗАМЕН.
     * @param {UserExam} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    examsUserExamsUpdate(id: number, data: UserExam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserExam>>;
};
/**
 * ExamsApi - factory interface
 * @export
 */
export declare const ExamsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {Exam} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    examsExamsCreate(data: Exam, options?: any): AxiosPromise<Exam>;
    /**
     *
     * @param {number} id A unique integer value identifying this Экзамен.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    examsExamsDelete(id: number, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    examsExamsList(options?: any): AxiosPromise<Array<Exam>>;
    /**
     *
     * @param {number} id A unique integer value identifying this Экзамен.
     * @param {Exam} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    examsExamsPartialUpdate(id: number, data: Exam, options?: any): AxiosPromise<Exam>;
    /**
     *
     * @param {number} id A unique integer value identifying this Экзамен.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    examsExamsRead(id: number, options?: any): AxiosPromise<Exam>;
    /**
     *
     * @param {number} id A unique integer value identifying this Экзамен.
     * @param {Exam} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    examsExamsUpdate(id: number, data: Exam, options?: any): AxiosPromise<Exam>;
    /**
     *
     * @param {number} id A unique integer value identifying this ВОПРОС.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    examsQuestionsDelete(id: number, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {UserExam} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    examsUserExamsCreate(data: UserExam, options?: any): AxiosPromise<UserExam>;
    /**
     *
     * @param {number} id A unique integer value identifying this ПОЛЬЗОВАТЕЛЬСКИЙ ЭКЗАМЕН.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    examsUserExamsDelete(id: number, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    examsUserExamsList(options?: any): AxiosPromise<Array<UserExam>>;
    /**
     *
     * @param {number} id A unique integer value identifying this ПОЛЬЗОВАТЕЛЬСКИЙ ЭКЗАМЕН.
     * @param {UserExam} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    examsUserExamsPartialUpdate(id: number, data: UserExam, options?: any): AxiosPromise<UserExam>;
    /**
     *
     * @param {number} id A unique integer value identifying this ПОЛЬЗОВАТЕЛЬСКИЙ ЭКЗАМЕН.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    examsUserExamsRead(id: number, options?: any): AxiosPromise<UserExamDetail>;
    /**
     *
     * @param {number} id A unique integer value identifying this ПОЛЬЗОВАТЕЛЬСКИЙ ЭКЗАМЕН.
     * @param {UserExam} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    examsUserExamsUpdate(id: number, data: UserExam, options?: any): AxiosPromise<UserExam>;
};
/**
 * ExamsApi - object-oriented interface
 * @export
 * @class ExamsApi
 * @extends {BaseAPI}
 */
export declare class ExamsApi extends BaseAPI {
    /**
     *
     * @param {Exam} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExamsApi
     */
    examsExamsCreate(data: Exam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Exam>>;
    /**
     *
     * @param {number} id A unique integer value identifying this Экзамен.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExamsApi
     */
    examsExamsDelete(id: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExamsApi
     */
    examsExamsList(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Exam[]>>;
    /**
     *
     * @param {number} id A unique integer value identifying this Экзамен.
     * @param {Exam} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExamsApi
     */
    examsExamsPartialUpdate(id: number, data: Exam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Exam>>;
    /**
     *
     * @param {number} id A unique integer value identifying this Экзамен.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExamsApi
     */
    examsExamsRead(id: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Exam>>;
    /**
     *
     * @param {number} id A unique integer value identifying this Экзамен.
     * @param {Exam} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExamsApi
     */
    examsExamsUpdate(id: number, data: Exam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Exam>>;
    /**
     *
     * @param {number} id A unique integer value identifying this ВОПРОС.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExamsApi
     */
    examsQuestionsDelete(id: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @param {UserExam} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExamsApi
     */
    examsUserExamsCreate(data: UserExam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UserExam>>;
    /**
     *
     * @param {number} id A unique integer value identifying this ПОЛЬЗОВАТЕЛЬСКИЙ ЭКЗАМЕН.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExamsApi
     */
    examsUserExamsDelete(id: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExamsApi
     */
    examsUserExamsList(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UserExam[]>>;
    /**
     *
     * @param {number} id A unique integer value identifying this ПОЛЬЗОВАТЕЛЬСКИЙ ЭКЗАМЕН.
     * @param {UserExam} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExamsApi
     */
    examsUserExamsPartialUpdate(id: number, data: UserExam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UserExam>>;
    /**
     *
     * @param {number} id A unique integer value identifying this ПОЛЬЗОВАТЕЛЬСКИЙ ЭКЗАМЕН.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExamsApi
     */
    examsUserExamsRead(id: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UserExamDetail>>;
    /**
     *
     * @param {number} id A unique integer value identifying this ПОЛЬЗОВАТЕЛЬСКИЙ ЭКЗАМЕН.
     * @param {UserExam} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExamsApi
     */
    examsUserExamsUpdate(id: number, data: UserExam, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UserExam>>;
}
